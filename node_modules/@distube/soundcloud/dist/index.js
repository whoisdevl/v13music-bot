"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// index.ts
var soundcloud_exports = {};
__export(soundcloud_exports, {
  SoundCloudPlugin: () => SoundCloudPlugin,
  default: () => soundcloud_default
});
module.exports = __toCommonJS(soundcloud_exports);
var import_soundcloud = __toESM(require("soundcloud.ts"));
var import_distube = require("distube");
var sc = new import_soundcloud.default();
var isTruthy = /* @__PURE__ */ __name((x) => Boolean(x), "isTruthy");
var SEARCH_SUPPORT = ["track", "playlist"];
var chunker = /* @__PURE__ */ __name((arr, size) => {
  const chunks = [];
  let i = 0;
  while (i < arr.length)
    chunks.push(arr.slice(i, i += size));
  return chunks;
}, "chunker");
var resolveTracks = /* @__PURE__ */ __name(async (tracks) => {
  const unsolved = tracks.splice(tracks.findIndex((t) => !t.title));
  const chunks = chunker(unsolved, 50);
  const promises = chunks.map((ts) => sc.api.getV2("/tracks", { ids: ts.map((t) => t.id).join(",") }));
  const solvedTracks = await Promise.all(promises);
  return tracks.concat(solvedTracks.flat());
}, "resolveTracks");
var SoundCloudPlugin = class extends import_distube.ExtractorPlugin {
  static async search(query, type = "track", limit = 10) {
    if (typeof query !== "string")
      throw new import_distube.DisTubeError("INVALID_TYPE", "string", query, "query");
    if (!SEARCH_SUPPORT.includes(type))
      throw new import_distube.DisTubeError("INVALID_TYPE", SEARCH_SUPPORT, type, "type");
    if (typeof limit !== "number" || limit < 1 || !Number.isInteger(limit)) {
      throw new import_distube.DisTubeError("INVALID_TYPE", "natural number", limit, "limit");
    }
    if (type === "track") {
      const data2 = await sc.tracks.searchV2({ q: query, limit });
      if (!data2?.collection?.length) {
        throw new import_distube.DisTubeError("SOUNDCLOUD_PLUGIN_NO_RESULT", `Cannot find any "${query}" ${type} on SoundCloud!`);
      }
      return data2.collection.map((t) => new import_distube.Song(new SoundCloudTrack(t)));
    }
    const data = await sc.playlists.searchV2({ q: query, limit });
    const playlists = data.collection;
    return (await Promise.all(playlists.map(async (p) => {
      const playlist = new SoundCloudPlaylist(p);
      if (!playlist.tracks?.length)
        return;
      playlist.songs = (await resolveTracks(playlist.tracks)).map((s) => new import_distube.Song(new SoundCloudTrack(s)));
      return new import_distube.Playlist(playlist);
    }))).filter(isTruthy);
  }
  search(query, type = "track", limit = 10) {
    return SoundCloudPlugin.search(query, type, limit);
  }
  async validate(url) {
    return /^https?:\/\/(?:(?:www|m)\.)?soundcloud\.com\/(.*)$/.test(url);
  }
  async resolve(url, options) {
    const opt = { ...options, source: "soundcloud" };
    url = url.replace(/:\/\/(m|www)\./g, "://");
    const data = await sc.resolve.getV2(url, true).catch(() => void 0);
    if (!data || !["track", "playlist"].includes(data.kind)) {
      throw new import_distube.DisTubeError("SOUNDCLOUD_PLUGIN_NOT_SUPPORTED", "Only public links are supported.");
    }
    if (data.kind === "playlist") {
      const playlist = new SoundCloudPlaylist(data);
      if (!playlist.tracks?.length)
        throw new import_distube.DisTubeError("SOUNDCLOUD_PLUGIN_EMPTY_PLAYLIST", "Playlist is empty.");
      playlist.songs = (await resolveTracks(playlist.tracks)).map((s) => new import_distube.Song(new SoundCloudTrack(s), opt));
      return new import_distube.Playlist(playlist, opt);
    } else {
      return new import_distube.Song(new SoundCloudTrack(data), opt);
    }
  }
  async getRelatedSongs(url) {
    const related = await sc.tracks.relatedV2(url, 10);
    return related.filter((t) => t.title).map((t) => new import_distube.Song(new SoundCloudTrack(t)));
  }
  async getStreamURL(url) {
    const stream = await sc.util.streamLink(url);
    if (!stream) {
      throw new import_distube.DisTubeError("SOUNDCLOUD_PLUGIN_RATE_LIMITED", "Reached SoundCloud rate limits\nSee more: https://developers.soundcloud.com/docs/api/rate-limits#play-requests");
    }
    return stream;
  }
};
__name(SoundCloudPlugin, "SoundCloudPlugin");
var SoundCloudTrack = class {
  constructor(info) {
    __publicField(this, "src");
    __publicField(this, "id");
    __publicField(this, "name");
    __publicField(this, "url");
    __publicField(this, "thumbnail");
    __publicField(this, "duration");
    __publicField(this, "views");
    __publicField(this, "reposts");
    __publicField(this, "uploader");
    __publicField(this, "uploader_url");
    this.src = "soundcloud";
    this.id = info.id.toString();
    this.name = info.title;
    this.url = info.permalink_url;
    this.thumbnail = info.artwork_url;
    this.duration = info.duration / 1e3;
    this.views = info.playback_count;
    this.reposts = info.reposts_count;
    this.uploader = info.user?.username;
    this.uploader_url = info.user?.permalink_url;
  }
};
__name(SoundCloudTrack, "SoundCloudTrack");
var SoundCloudPlaylist = class {
  constructor(info) {
    __publicField(this, "source");
    __publicField(this, "songs");
    __publicField(this, "id");
    __publicField(this, "name");
    __publicField(this, "url");
    __publicField(this, "thumbnail");
    __publicField(this, "tracks");
    this.source = "soundcloud";
    this.id = info.id;
    this.name = info.title;
    this.url = info.permalink_url;
    this.thumbnail = info.artwork_url ?? void 0;
    this.tracks = info.tracks;
  }
};
__name(SoundCloudPlaylist, "SoundCloudPlaylist");
var soundcloud_default = SoundCloudPlugin;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SoundCloudPlugin
});
//# sourceMappingURL=index.js.map