{"version":3,"sources":["../index.ts"],"sourcesContent":["import SoundCloud from \"soundcloud.ts\";\nimport { DisTubeError, ExtractorPlugin, Playlist, Song } from \"distube\";\nimport type { GuildMember } from \"discord.js\";\nimport type { OtherSongInfo, PlaylistInfo } from \"distube\";\nimport type { SoundcloudPlaylistV2, SoundcloudTrackV2 } from \"soundcloud.ts\";\nconst sc = new SoundCloud();\n\ntype Falsy = undefined | null | false | 0 | \"\";\nconst isTruthy = <T>(x: T | Falsy): x is T => Boolean(x);\ntype ElementOf<A> = A extends readonly (infer T)[] ? T : never;\nconst SEARCH_SUPPORT = [\"track\", \"playlist\"] as const;\n\nconst chunker = (arr: any[], size: number) => {\n  const chunks = [];\n  let i = 0;\n  while (i < arr.length) chunks.push(arr.slice(i, (i += size)));\n  return chunks;\n};\n\nconst resolveTracks = async (tracks: SoundcloudTrackV2[]): Promise<SoundcloudTrackV2[]> => {\n  const unsolved = tracks.splice(tracks.findIndex(t => !t.title));\n  const chunks = chunker(unsolved, 50);\n  const promises = chunks.map(ts => sc.api.getV2(\"/tracks\", { ids: ts.map(t => t.id).join(\",\") }));\n  const solvedTracks = await Promise.all(promises);\n  return tracks.concat(solvedTracks.flat());\n};\n\nexport class SoundCloudPlugin extends ExtractorPlugin {\n  /**\n   * Search for tracks/playlists on SoundCloud\n   * @param {string} query String query\n   * @param {'track'|'playlist'} [type='track'] type\n   * @param {number} [limit=10] limit\n   * @returns {Array<Song>|Array<Playlist>}\n   */\n  static async search(query: string, type: ElementOf<typeof SEARCH_SUPPORT> = \"track\", limit = 10) {\n    if (typeof query !== \"string\") throw new DisTubeError(\"INVALID_TYPE\", \"string\", query, \"query\");\n    if (!SEARCH_SUPPORT.includes(type)) throw new DisTubeError(\"INVALID_TYPE\", SEARCH_SUPPORT, type, \"type\");\n    if (typeof limit !== \"number\" || limit < 1 || !Number.isInteger(limit)) {\n      throw new DisTubeError(\"INVALID_TYPE\", \"natural number\", limit, \"limit\");\n    }\n    if (type === \"track\") {\n      const data = await sc.tracks.searchV2({ q: query, limit });\n      if (!data?.collection?.length) {\n        throw new DisTubeError(\"SOUNDCLOUD_PLUGIN_NO_RESULT\", `Cannot find any \"${query}\" ${type} on SoundCloud!`);\n      }\n      return data.collection.map(t => new Song(new SoundCloudTrack(t)));\n    }\n    const data = await sc.playlists.searchV2({ q: query, limit });\n    const playlists = data.collection;\n    return (\n      await Promise.all(\n        playlists.map(async p => {\n          const playlist = new SoundCloudPlaylist(p);\n          if (!playlist.tracks?.length) return;\n          playlist.songs = (await resolveTracks(playlist.tracks)).map(s => new Song(new SoundCloudTrack(s)));\n          // eslint-disable-next-line consistent-return\n          return new Playlist(playlist);\n        }),\n      )\n    ).filter(isTruthy);\n  }\n\n  /**\n   * Search for tracks/playlists on SoundCloud\n   * @param {string} query String query\n   * @param {'track'|'playlist'} [type='track'] type\n   * @param {number} [limit=10] limit\n   * @returns {Array<Song>|Array<Playlist>}\n   */\n  search(query: string, type: ElementOf<typeof SEARCH_SUPPORT> = \"track\", limit = 10) {\n    return SoundCloudPlugin.search(query, type, limit);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  override async validate(url: string) {\n    return /^https?:\\/\\/(?:(?:www|m)\\.)?soundcloud\\.com\\/(.*)$/.test(url);\n  }\n\n  async resolve(url: string, options: { member?: GuildMember; metadata?: any }) {\n    const opt = { ...options, source: \"soundcloud\" };\n    url = url.replace(/:\\/\\/(m|www)\\./g, \"://\");\n    const data = await sc.resolve.getV2(url, true).catch(() => undefined);\n    if (!data || ![\"track\", \"playlist\"].includes(data.kind)) {\n      throw new DisTubeError(\"SOUNDCLOUD_PLUGIN_NOT_SUPPORTED\", \"Only public links are supported.\");\n    }\n    if (data.kind === \"playlist\") {\n      const playlist = new SoundCloudPlaylist(data);\n      if (!playlist.tracks?.length) throw new DisTubeError(\"SOUNDCLOUD_PLUGIN_EMPTY_PLAYLIST\", \"Playlist is empty.\");\n      playlist.songs = (await resolveTracks(playlist.tracks)).map(s => new Song(new SoundCloudTrack(s), opt));\n      return new Playlist(playlist, opt);\n    } else {\n      return new Song(new SoundCloudTrack(data), opt);\n    }\n  }\n\n  override async getRelatedSongs(url: string | number) {\n    const related = await sc.tracks.relatedV2(url, 10);\n    return related.filter(t => t.title).map(t => new Song(new SoundCloudTrack(t)));\n  }\n\n  override async getStreamURL(url: string) {\n    const stream = await sc.util.streamLink(url);\n    if (!stream) {\n      throw new DisTubeError(\n        \"SOUNDCLOUD_PLUGIN_RATE_LIMITED\",\n        \"Reached SoundCloud rate limits\\nSee more: https://developers.soundcloud.com/docs/api/rate-limits#play-requests\",\n      );\n    }\n    return stream;\n  }\n}\n\nclass SoundCloudTrack implements OtherSongInfo {\n  src: \"soundcloud\";\n  id: string;\n  name: string;\n  url: string;\n  thumbnail: string;\n  duration: number;\n  views: number;\n  reposts: number;\n  uploader: string;\n  uploader_url: string;\n  constructor(info: SoundcloudTrackV2) {\n    this.src = \"soundcloud\";\n    this.id = info.id.toString();\n    this.name = info.title;\n    this.url = info.permalink_url;\n    this.thumbnail = info.artwork_url;\n    this.duration = info.duration / 1000;\n    this.views = info.playback_count;\n    this.reposts = info.reposts_count;\n    this.uploader = info.user?.username;\n    this.uploader_url = info.user?.permalink_url;\n  }\n}\n\nclass SoundCloudPlaylist implements PlaylistInfo {\n  source: \"soundcloud\";\n  songs!: Song[];\n  id: number;\n  name: string;\n  url: string;\n  thumbnail?: string;\n  tracks: SoundcloudTrackV2[];\n  constructor(info: SoundcloudPlaylistV2) {\n    this.source = \"soundcloud\";\n    this.id = info.id;\n    this.name = info.title;\n    this.url = info.permalink_url;\n    this.thumbnail = info.artwork_url ?? undefined;\n    this.tracks = info.tracks;\n  }\n}\n\nexport default SoundCloudPlugin;\n"],"mappings":"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","names":[]}